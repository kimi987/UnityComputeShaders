// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SolidRed
#pragma kernel SolidYellow
#pragma kernel SplitScreen
#pragma kernel Cycle;
#pragma kernel Square;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
int texResolution;

[numthreads(8,8,1)]
void SolidRed (uint3 id : SV_DispatchThreadID)
{
     Result[id.xy] = float4(1.0, 0.0, 0.0, 1.0);
}

[numthreads(8,8,1)]
void SolidYellow(uint3 id : SV_DispatchThreadID)
{
     Result[id.xy] = float4(1.0, 1.0, 0.0, 1.0);
}

[numthreads(8,8,1)]
void SplitScreen(uint3 id : SV_DispatchThreadID)
{
     int compareVal = texResolution/2;
     Result[id.xy] = float4(step(compareVal, id.x), step(compareVal, id.y), 0.0, 1.0);
}

[numthreads(8,8,1)]
void Cycle(uint3 id : SV_DispatchThreadID)
{
     int2 center = int2(texResolution/2, texResolution/2);
     float yellowVal = (float)length((int2)id.xy - center) > (float)(texResolution >> 2) ? 0 : 1;
     Result[id.xy] = float4(yellowVal, yellowVal, 0.0, 1.0);
}

[numthreads(8,8,1)]
void Square(uint3 id : SV_DispatchThreadID)
{
     int2 center = int2(texResolution/2, texResolution/2);
     int borde = (texResolution >> 2);
     float val = (id.x < center + borde && id.x > center - borde) && (id.y < center + borde && id.y > center - borde) ? 1.0 : 0.0;

     Result[id.xy] = float4(0, 0, val, 1.0);
}